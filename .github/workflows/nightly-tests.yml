name: Nightly Strategy Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Check for code changes since last nightly run
        id: check
        run: |
          # Get the last nightly test run timestamp
          LAST_RUN=$(gh run list --workflow="nightly-tests.yml" --status=success --limit=1 --json createdAt --jq '.[0].createdAt // "1970-01-01T00:00:00Z"')
          echo "Last successful nightly run: $LAST_RUN"

          # Check if there are any commits since the last run
          SINCE_DATE=$(date -d "$LAST_RUN" -u +"%Y-%m-%dT%H:%M:%SZ")
          CHANGES=$(git log --since="$SINCE_DATE" --pretty=format:"%h" --no-merges -- src/ tests/ pyproject.toml docker-compose.test.yml)

          if [ -n "$CHANGES" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Code changes detected since last nightly run:"
            git log --since="$SINCE_DATE" --oneline --no-merges -- src/ tests/ pyproject.toml docker-compose.test.yml
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No code changes detected since last nightly run"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-strategies:
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --group dev --group test

      - name: Start Materialize Emulator
        run: |
          docker compose -f docker-compose.test.yml up -d

          # Wait for Materialize to be ready
          echo "Waiting for Materialize to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker compose -f docker-compose.test.yml exec -T materialize pg_isready -h localhost -p 6875 -U materialize; then
              echo "Materialize is ready!"
              break
            fi
            echo "Waiting for Materialize... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout-2))
          done

          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Materialize to be ready"
            docker compose -f docker-compose.test.yml logs materialize
            exit 1
          fi

      - name: Run strategy smoke tests
        env:
          MATERIALIZE_URL: postgres://materialize@localhost:6875/materialize
        run: |
          # Run unit tests
          uv run pytest tests/ -v --tb=short -x

          # Run integration tests specifically
          uv run pytest tests/ -v --tb=short -m integration

      - name: Run linting and formatting checks
        run: |
          uv run ruff check src/ tests/
          uv run ruff format --check src/ tests/

      - name: Stop Materialize Emulator
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            .pytest_cache/
            tests/

  notify-on-failure:
    needs: [check-changes, test-strategies]
    if: failure() && needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create issue on test failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Nightly strategy tests failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `The nightly strategy tests failed. Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.

            This likely indicates a regression in one of the scheduling strategies or test infrastructure.

            Auto-generated issue from nightly test failure.`;

            // Check if there's already an open issue for today's date
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'nightly-test-failure',
              per_page: 10
            });

            const today = new Date().toISOString().split('T')[0];
            const existingIssue = issues.find(issue => issue.title.includes(today));

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['nightly-test-failure', 'bug']
              });
            } else {
              // Update existing issue with new failure
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `Another nightly test failure occurred. Check [this workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`
              });
            }

  summary:
    needs: [check-changes, test-strategies]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Print summary
        run: |
          echo "## Nightly Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Changes**: ${{ needs.check-changes.outputs.has-changes }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-changes.outputs.has-changes }}" == "true" ]; then
            echo "- **Tests Status**: ${{ needs.test-strategies.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Tests Status**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Nightly tests check for code changes since the last successful run and only execute if changes are detected." >> $GITHUB_STEP_SUMMARY
