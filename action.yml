name: 'Materialize Cluster Controller'
description: 'Manage Materialize cluster replicas with configurable auto-scaling and idle shutdown strategies'
author: 'Materialize Inc.'

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  database-url:
    description: 'PostgreSQL connection URL for Materialize'
    required: true
  mode:
    description: 'Operation mode: apply or dry-run'
    required: false
    default: 'apply'
  verbosity:
    description: 'Verbosity level: -v or -vv'
    required: false
    default: '-vv'
  filter-clusters:
    description: 'Limit to clusters matching this name regex'
    required: false
  cluster:
    description: 'Cluster to use for executing commands (executes SET cluster = <cluster>)'
    required: false
  create-replica:
    description: 'Create a temporary replica for the cluster with optional size (requires cluster)'
    required: false
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: uv sync

    - name: Run mz-clusterctl
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        DATABASE_URL: ${{ inputs.database-url }}
      run: |
        ARGS="${{ inputs.mode }} ${{ inputs.verbosity }}"
        if [ -n "${{ inputs.cluster }}" ]; then
          ARGS="$ARGS --cluster ${{ inputs.cluster }}"
        fi
        if [ -n "${{ inputs.create-replica }}" ]; then
          ARGS="$ARGS --create-replica ${{ inputs.create-replica }}"
        fi
        if [ -n "${{ inputs.filter-clusters }}" ]; then
          ARGS="$ARGS --filter-clusters ${{ inputs.filter-clusters }}"
        fi
        uv run mz-clusterctl $ARGS
